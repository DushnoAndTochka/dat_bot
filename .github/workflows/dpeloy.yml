name: Bot deploy workflow

on: 
  push:
    branches:
      - 'main'

jobs:
  golangci:
    name: lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/setup-go@v4
        with:
          go-version: '1.20'
          cache: false
      - uses: actions/checkout@v3
      - name: golangci-lint
        uses: golangci/golangci-lint-action@v3
        with:
          version: v1.51
  build_and_push_to_docker_hub:
    name: Push Docker image to Docker Hub
    runs-on: ubuntu-latest
    needs: golangci
    steps:
      - name: Check out the repo
        uses: actions/checkout@master
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@master
      - name: Login to Docker
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Build, tag, and push
        id: build-image
        run: |
          touch .env
          echo TELEGRAM_BOT_TOKEN=${{ secrets.BOT_TELEGRAM_TOKEN }} >> .env
          echo POSTGRES_DB=${{ secrets.DB_NAME }} >> .env
          echo POSTGRES_USER=${{ secrets.POSTGRES_USER }} >> .env
          echo POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }} >> .env
          echo DB_HOST=${{ secrets.DB_HOST }} >> .env
          echo DB_PORT=${{ secrets.DB_PORT }} >> .env
          docker-compose build
          docker-compose push
  deploy:
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    needs: build_and_push_to_docker_hub
    steps:
    - uses: actions/checkout@master
    - name: copy file via ssh password
      uses: appleboy/scp-action@master
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USER }}
        key: ${{ secrets.SSH_KEY }}
        source: "docker-compose.yml,migrations"
        target: "./"
    - name: executing remote ssh commands to deploy
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USER }}
        key: ${{ secrets.SSH_KEY }}
        script: |
          sudo docker-compose stop
          sudo docker-compose rm -f dat_bot
          rm -rf .env
          touch .env
          echo TELEGRAM_BOT_TOKEN=${{ secrets.BOT_TELEGRAM_TOKEN }} >> .env
          echo POSTGRES_DB=${{ secrets.DB_NAME }} >> .env
          echo POSTGRES_USER=${{ secrets.POSTGRES_USER }} >> .env
          echo POSTGRES_PASSWORD="${{ secrets.POSTGRES_PASSWORD }}" >> .env
          echo DB_HOST=${{ secrets.DB_HOST }} >> .env
          echo DB_PORT=${{ secrets.DB_PORT }} >> .env
          sudo docker-compose pull
          sudo docker-compose up -d
          GOOSE_DRIVER=postgres GOOSE_DBSTRING="user=${{ secrets.POSTGRES_USER }} dbname=${{ secrets.DB_NAME }} sslmode=disable host=127.0.0.1 password='${{ secrets.POSTGRES_PASSWORD }}'" goose -dir migrations up
          rm -rf migrations
  send_message:
    runs-on: ubuntu-latest
    needs: deploy
    steps:
    - name: send message
      uses: appleboy/telegram-action@master
      with:
        to: ${{ secrets.TELEGRAM_TO }}
        token: ${{ secrets.TELEGRAM_TOKEN }}
        message: ${{ github.workflow }} успешно выполнен! 